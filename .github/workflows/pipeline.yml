name: Main CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.12.9

    - name: Extract version from __init__.py
      run: |
        VERSION=$(grep '__version__' gamr_backend_api_service/__init__.py | sed -E 's/__version__ = \"([^\"]+)\"/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check if version exists on PyPI
      run: |
        if pip index versions gamr-backend-api-service | grep -q "$VERSION"; then
          echo "Version $VERSION already exists on PyPI. Update the version."
          exit 1
        fi

    - name: Install pipenv
      run: pip install pipenv

    - name: Linter and style check
      run: |
        pip install pre-commit==4.1.0
        pre-commit run --all-file

    - name: Install dependencies
      run: pipenv install --dev
      env:
        PIPENV_VENV_IN_PROJECT: 1

    - name: Test with pytest
      run: pipenv run test

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        files: |
          pytest-report.xml

  deploy:
    needs: build
    runs-on: ubuntu-latest

    if: ${{ github.ref == 'refs/heads/main' }}

    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.12.9

    - name: Install pipenv
      run: pip install pipenv

    - name: Install dependencies
      run: pipenv install --dev
      env:
        PIPENV_VENV_IN_PROJECT: 1

    - name: Build
      run: pipenv run build

    - name: Publish
      env:
        PYPI_USERNAME: __token__
        PYPI_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: pipenv run publish
